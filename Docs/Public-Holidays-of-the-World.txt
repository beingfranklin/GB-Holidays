-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/Public-Holidays-of-the-World#readme</a>
@package Public-Holidays-of-the-World
@version 0.1.0.0


-- | HTTP module header
module Http

-- | This function is for converting JSON from URL
download :: String -> IO ByteString


-- | Parse module header
module Parse

-- | HolidayRecord constructor
data HolidayRecord
HolidayRecord :: String -> String -> String -> String -> Bool -> Bool -> HolidayRecord
[date] :: HolidayRecord -> String
[localName] :: HolidayRecord -> String
[name] :: HolidayRecord -> String
[countryCode] :: HolidayRecord -> String
[global] :: HolidayRecord -> Bool
[fixed] :: HolidayRecord -> Bool

-- | This function is for converting JSON to text
parse :: ByteString -> Either String [HolidayRecord]
instance GHC.Generics.Generic Parse.HolidayRecord
instance GHC.Show.Show Parse.HolidayRecord
instance Data.Aeson.Types.FromJSON.FromJSON Parse.HolidayRecord
instance Data.Aeson.Types.ToJSON.ToJSON Parse.HolidayRecord


-- | Database module header
module Database

-- | This is a function is for initialising the database and to create the
--   table if the tables do not exists yet
initialiseDB :: IO Connection

-- | This function will insert the holiday records into the database
insertDB :: Connection -> [HolidayRecord] -> IO ()

-- | This function will insert the country records into the dsatabase
insertLB :: Connection -> [HolidayRecord] -> IO ()

-- | This function will insert the country_holidays records into the
--   dsatabase
insertSB :: Connection -> [HolidayRecord] -> IO ()

-- | This function will select all the holidays of a given country
queryDB :: Connection -> String -> IO [[SqlValue]]

-- | This function will select all the holidays in the date specified of a
--   given country
selectHolidaysInDateRange :: Connection -> String -> String -> IO [String]

-- | This function will call all the names on the database.
getNames :: Connection -> IO [String]

-- | This function will call all the names on the database.
getLocalNames :: Connection -> Bool -> IO [String]

-- | This function is used to convert from Haskell datatypes to SQL
--   datatypes toSql function used from HDBC to do the convert for all
--   values to SQL in the database
recordToSqlValues :: HolidayRecord -> [SqlValue]

-- | This function is used to convert from Haskell datatypes to SQL
--   datatypes toSql function used from HDBC to do the convert for all
--   values to SQL in the database
holidayToSqlValues :: HolidayRecord -> [SqlValue]

-- | This function performs an action (ie. to insert the values into
--   holidays)
prepareInsertRecordStmt :: Connection -> IO Statement

-- | This function performs an action (ie. to fetch the values from
--   holidays)
prepareSelectRecordStma :: Connection -> IO Statement

-- | Thus function for saving all the records into the database passing the
--   executeMany function in HDBC library then execute a list of lists of
--   values and it preforms an action which dose not return anything it
--   just preforms that sql statement
saveHolidayRecord :: [HolidayRecord] -> Connection -> IO ()

-- | This function saves the country record
savecountriesRecord :: [HolidayRecord] -> Connection -> IO ()

-- | This function converts into Row into the string
sqlRowToString :: [[SqlValue]] -> [String]

-- | This function is to retrieve all the SQLs on the database
getUnprocessedSQLHolidays :: Connection -> IO [HolidayRecord]

-- | This function converts SQL into JSON
convertToJSON :: Connection -> IO String
